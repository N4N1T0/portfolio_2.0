---
import { getProjects } from '@/lib/fetchers'
import ProjectItem from './ProjectItem.astro'
import { buttonVariants } from '@/components/ui/utils'
import { Icons } from '@/components/icons/icons'

interface Props {
  subtitle?: string
  showAll?: boolean
}

const { subtitle, showAll = false } = Astro.props

// FETCHERS
const projects = await getProjects('en')
---

<section class='section container px-4' data-show-more={showAll}>
  <h2 class='text-3xl font-pixel screen-line-after py-2'>
    Projects
    <sup class='text-sm text-muted-foreground select-none'>
      ({projects.length})
    </sup>
  </h2>
  {subtitle && <p class='text-muted-foreground py-1 font-pixel'>{subtitle}</p>}
  <ul>
    {
      projects.map((project) => (
        <li>
          <ProjectItem project={project} />
        </li>
      ))
    }
  </ul>
  <div class='screen-line-before flex justify-center py-2'>
    <button
      id='show-more-projects'
      class={buttonVariants({ variant: 'default' })}
    >
      Show More
      <Icons.chevronUp class='rotate-180' id='show-more-icon-projects' />
    </button>
  </div>
</section>

<script>
  import { animate, stagger } from 'animejs'

  const showMoreSection = document.querySelector(
    '[data-show-more]'
  ) as HTMLElement
  const allowToggle = showMoreSection?.dataset.showMore === 'false'

  if (allowToggle) {
    const showMore = document.getElementById(
      'show-more-projects'
    ) as HTMLButtonElement
    const showMoreIcon = document.getElementById(
      'show-more-icon-projects'
    ) as HTMLElement
    const projectItems = document.querySelectorAll('.project-item')

    let isExpanded = false

    const toggleItems = () => {
      const hiddenItems = Array.from(projectItems).slice(3)

      if (!isExpanded) {
        hiddenItems.forEach((item) => item.classList.remove('hidden'))

        animate(hiddenItems, {
          opacity: [0, 1],
          scale: [0.95, 1],
          easing: 'easeOutExpo',
          duration: 500,
          delay: stagger(100, { start: 0 })
        })

        showMore.textContent = 'Show Less'
        showMoreIcon.classList.remove('rotate-180')
        isExpanded = true
      } else {
        animate(hiddenItems, {
          opacity: [1, 0],
          scale: [1, 0.95],
          easing: 'easeInExpo',
          duration: 300,
          delay: stagger(80, { reversed: true }),
          onComplete: () => {
            hiddenItems.forEach((item) => item.classList.add('hidden'))
          }
        })

        showMore.textContent = 'Show More'
        showMoreIcon.classList.add('rotate-180')
        isExpanded = false
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      projectItems.forEach((item, index) => {
        if (index > 2) item.classList.add('hidden')
      })

      showMore.addEventListener('click', () => toggleItems())
    })
  }
</script>
